#The driver script which uses functions from Modis process script
#loop every .hdf data in current directory and generate the geotiff output

import os
from glob import glob
import geopandas as gpd
import process as pro
import pandas as pd
import datetime as dt


modis_list = glob("*.hdf") #acquire all the hdf file in current directory
toronto_boundary = gpd.read_file("G:/laads/toronto_boundary/toronto_sin.shp") #read in boundary data in shapefile format
quality_day_file = pd.DataFrame() #create two pandas dataframe to store quality information
quality_night_file = pd.DataFrame()
for item in modis_list: #loop over all the item
    modis_data = pro.read_hdf(item) #read the hdf data
    clipped_data = pro.clip_data(modis_data,toronto_boundary) #clip the hdf data based on boundary
    qc_day = clipped_data.QC_Day #identify the quality control data for day and night time
    qc_night = clipped_data.QC_Night
    binary_day = pro.binary_convert(qc_day) #create a binary dict contains all exist values
    binary_night = pro.binary_convert(qc_night)
    count_day = pro.count_qc(qc_day,binary_day) #count the number of each existing values
    count_night = pro.count_qc(qc_night,binary_night)
    current_qc_day = pd.DataFrame(count_day, index = [item[9:16]]) #convert it into dataframe format with index as the data collection time
    current_qc_night = pd.DataFrame(count_night, index = [item[9:16]])
    quality_day_file = pd.concat([quality_day_file,current_qc_day]) #append the data to the overall dataframe
    quality_night_file = pd.concat([quality_night_file,current_qc_night])
    mod_modis_day = pro.mask_day_data(clipped_data) #mask day and night temperature data with error greater than 2k
    mod_modis_night = pro.mask_night_data(clipped_data)
    scaled_data_day = pro.unit_conversion(mod_modis_day,"LST_Day_1km") #scale the LST data into degree Celsius
    scaled_data_night = pro.unit_conversion(mod_modis_night,"LST_Night_1km")
    pro.save_tif(scaled_data_day,str(item),"Day_clip","Day_result") #save the data in tif format
    pro.save_tif(scaled_data_night,str(item),"Night_clip","Night_result")
quality_day_file.to_csv("qc_day.csv") #save the quality control data in csv format
quality_night_file.to_csv("qc_night.csv")
endtime = dt.datetime.now()
print ("Finished, {} files are processed".format(len(modis_list)))
